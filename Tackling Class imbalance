import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import resample
from imblearn.under_sampling import RandomUnderSampler
from imblearn.over_sampling import RandomOverSampler 
from imblearn.under_sampling import TomekLinks 
from imblearn.over_sampling import SMOTE 
#1 Over Sampling miniority class using resample method 
non_fraud=x[x.isFraud==0]
fraud=x[x.isFraud==1]
fraud_upsample=resample(fraud,replace=True,n_samples=len(non_fraud),random_state=27)
up_sample=pd.concat([non_fraud,fraud_upsample])
up_sample.isFraud.value_counts()

#2 under sampling majority class 
non_fraud=x[x.isFraud==0]
fraud=x[x.isFraud==1]
down_sample=resample(non_fraud,n_samples=len(fraud),replace=False,random_state=42)
down_sam=pd.concat([fraud,down_sample])
down_sam.isFraud.value_counts()

#3 RandomUnderSampler in imblearn.under_sampling 
   undersample=RandomUnderSampler(return_indices=True)
   x_re,y_re,droped=undersample.fit_sample(x,y)
   
#4 RandomOversampler in imblearn.over_samplear 
   oversample=RandomOversampler()
   x_res,y_res=oversample.fit_resample(x,y)

#5 TomekLinks 
   tl = TomekLinks(return_indices=True, ratio='majority')
   X_tl, y_tl, id_tl = tl.fit_sample(x, y)
#5 SMOTE  
   smote = SMOTE(ratio='minority')
   X_sm, y_sm = smote.fit_sample(x, y)
